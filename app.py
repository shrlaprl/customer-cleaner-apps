{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "606ea2bc-d0c3-4016-9e72-9481012a1312",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-17 09:58:09.668 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\SLP\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n"
     ]
    }
   ],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import re\n",
    "from datetime import datetime\n",
    "import plotly.express as px\n",
    "\n",
    "# --- Helper Functions ---\n",
    "def valid_nik(nik):\n",
    "    return isinstance(nik, str) and nik.isdigit() and len(nik) == 16\n",
    "\n",
    "def extract_birth_gender(nik):\n",
    "    try:\n",
    "        tgl = int(nik[6:8])\n",
    "        bln = int(nik[8:10])\n",
    "        thn = int(nik[10:12])\n",
    "        gender = \"Female\" if tgl > 40 else \"Male\"\n",
    "        tgl = tgl - 40 if gender == \"Female\" else tgl\n",
    "        year_prefix = 1900 if thn > 24 else 2000\n",
    "        birthdate = datetime(year_prefix + thn, bln, tgl)\n",
    "        return birthdate, gender\n",
    "    except:\n",
    "        return np.nan, np.nan\n",
    "\n",
    "def extract_location(nik, mapping):\n",
    "    try:\n",
    "        kode = int(nik[:4])\n",
    "        lokasi = mapping.get(kode, np.nan)\n",
    "        return lokasi\n",
    "    except:\n",
    "        return np.nan\n",
    "\n",
    "def valid_hp(hp):\n",
    "    return isinstance(hp, str) and re.fullmatch(r'\\+?62?8[1-9][0-9]{6,10}', hp)\n",
    "\n",
    "def calculate_age(birthdate, ref_date):\n",
    "    if pd.isnull(birthdate) or pd.isnull(ref_date):\n",
    "        return np.nan\n",
    "    return int((ref_date - birthdate).days / 365.25)\n",
    "\n",
    "# --- Load NIK Mapping ---\n",
    "mapping_df = pd.read_excel(\"Mappingan NIK.xlsx\")\n",
    "nik_mapping = dict(zip(mapping_df.iloc[:, 0], mapping_df.iloc[:, 1]))\n",
    "\n",
    "# --- Streamlit App ---\n",
    "st.title(\"Customer Data Cleaner & Profiler\")\n",
    "\n",
    "uploaded_file = st.file_uploader(\"Upload Data Customer (Excel/CSV)\", type=[\"csv\", \"xlsx\"])\n",
    "\n",
    "if uploaded_file:\n",
    "    if uploaded_file.name.endswith(\".csv\"):\n",
    "        df = pd.read_csv(uploaded_file)\n",
    "    else:\n",
    "        df = pd.read_excel(uploaded_file)\n",
    "\n",
    "    st.subheader(\"Raw Data\")\n",
    "    st.write(df.head())\n",
    "\n",
    "    # --- Data Cleaning ---\n",
    "    df['NIK'] = df['NIK'].astype(str).str.zfill(16)\n",
    "    df['NIK_Valid'] = df['NIK'].apply(valid_nik)\n",
    "\n",
    "    for i in range(1, 5):\n",
    "        col = f'HP_{i}'\n",
    "        if col in df.columns:\n",
    "            df[f'{col}_Valid'] = df[col].astype(str).apply(valid_hp)\n",
    "\n",
    "    # --- Enrichment ---\n",
    "    df['Birthdate_Extracted'], df['Gender_Extracted'] = zip(*df['NIK'].where(df['NIK_Valid']).apply(lambda x: extract_birth_gender(x)))\n",
    "    df['Lokasi_Extracted'] = df['NIK'].where(df['NIK_Valid']).apply(lambda x: extract_location(x, nik_mapping))\n",
    "\n",
    "    # Update missing gender, birthdate, location\n",
    "    df['Gender'] = df['Gender'].fillna(df['Gender_Extracted'])\n",
    "    df['Birthdate'] = pd.to_datetime(df['Birthdate'], errors='coerce').fillna(df['Birthdate_Extracted'])\n",
    "    df['Lokasi'] = df['Lokasi'].fillna(df['Lokasi_Extracted'])\n",
    "\n",
    "    # --- Hitung Usia ---\n",
    "    df['Period From'] = pd.to_datetime(df['Period From'], errors='coerce')\n",
    "    df['Usia_Hitung'] = df.apply(lambda x: calculate_age(x['Birthdate'], x['Period From']), axis=1)\n",
    "\n",
    "    st.subheader(\"Cleaned & Enriched Data\")\n",
    "    st.write(df.head())\n",
    "\n",
    "    # --- Dashboard Profiling ---\n",
    "    st.subheader(\"Dashboard Profiling\")\n",
    "\n",
    "    tab1, tab2, tab3 = st.tabs([\"Demografi\", \"Asuransi\", \"Claim\"])\n",
    "\n",
    "    with tab1:\n",
    "        st.write(\"### Distribusi Gender\")\n",
    "        fig = px.pie(df, names='Gender', title='Gender Distribution')\n",
    "        st.plotly_chart(fig)\n",
    "\n",
    "        st.write(\"### Distribusi Usia\")\n",
    "        fig = px.histogram(df, x='Usia_Hitung', nbins=20, title='Age Distribution')\n",
    "        st.plotly_chart(fig)\n",
    "\n",
    "        st.write(\"### Distribusi Lokasi\")\n",
    "        fig = px.histogram(df, x='Lokasi', title='Location Distribution')\n",
    "        st.plotly_chart(fig)\n",
    "\n",
    "    with tab2:\n",
    "        if 'Brand Mobil' in df.columns:\n",
    "            st.write(\"### Brand Mobil\")\n",
    "            fig = px.histogram(df, x='Brand Mobil', title='Car Brands')\n",
    "            st.plotly_chart(fig)\n",
    "\n",
    "        if 'Model Mobil' in df.columns:\n",
    "            st.write(\"### Model Mobil\")\n",
    "            fig = px.histogram(df, x='Model Mobil', title='Car Models')\n",
    "            st.plotly_chart(fig)\n",
    "\n",
    "    with tab3:\n",
    "        if 'Claim Ratio' in df.columns:\n",
    "            st.write(\"### Claim Ratio\")\n",
    "            fig = px.box(df, y='Claim Ratio', title='Claim Ratio Distribution')\n",
    "            st.plotly_chart(fig)\n",
    "\n",
    "        if 'Claim Frekuensi' in df.columns:\n",
    "            st.write(\"### Claim Frekuensi\")\n",
    "            fig = px.histogram(df, x='Claim Frekuensi', title='Claim Frequency')\n",
    "            st.plotly_chart(fig)\n",
    "\n",
    "    # --- Download ---\n",
    "    st.download_button(\"Download Cleaned Data\", df.to_csv(index=False).encode(), file_name=\"cleaned_data.csv\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "e7403b8b-d643-4a2f-a3aa-a733f71480ab",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
